using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using BrutalTester.Sim;
using Game.Fast;
using Game.Helpers;
using Game.Protocol;
using Game.Strategies;
using Game.Types;
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
using NUnit.Framework;

namespace UnitTests
{
    [TestFixture]
    public class Class1
    {
        [Test]
        public void Debug()
        {
            Logger.enableFile = true;
            Logger.minLevel = Logger.Level.Debug;
            
            var state = new FastState();

            var config = new Config
            {
                x_cells_count = 31,
                y_cells_count = 31,
                speed = 5,
                width = 30
            };
            config.Prepare();

            var input = JsonConvert.DeserializeObject<RequestInput>(
                @"{""players"":{""2"":{""score"":172,""direction"":""down"",""territory"":[[495,405],[495,435],[495,465],[495,495],[495,525],[495,555],[525,255],[525,285],[525,315],[525,345],[525,375],[525,405],[525,435],[525,465],[525,495],[525,525],[525,555],[525,585],[555,165],[555,195],[555,225],[555,255],[555,285],[555,315],[555,345],[555,375],[555,405],[555,435],[555,465],[555,495],[555,525],[555,555],[555,585],[585,165],[585,195],[585,225],[585,255],[585,285],[585,315],[585,345],[585,375],[585,405],[585,435],[585,465],[585,495],[585,525],[585,555],[615,165],[615,195],[615,225],[615,255],[615,285],[615,315],[615,345],[615,375],[615,405],[615,435],[615,465],[615,495],[615,525],[615,555],[645,165],[645,195],[645,225],[645,255],[645,285],[645,315],[645,345],[645,375],[645,405],[645,435],[645,465],[645,495],[645,525],[645,555],[675,165],[675,195],[675,225],[675,255],[675,285],[675,315],[675,345],[675,375],[675,405],[675,435],[675,465],[675,495],[675,525],[675,555],[705,165],[705,195],[705,225],[705,255],[705,285],[705,315],[705,345],[705,375],[705,405],[705,435],[705,465],[705,495],[705,525],[705,555],[735,165],[735,195],[735,225],[735,255],[735,285],[735,315],[735,345],[735,375],[735,405],[735,435],[735,465],[735,495],[735,525],[735,555],[765,165],[765,195],[765,225],[765,255],[765,285],[765,315],[765,345],[765,375],[765,405],[765,435],[765,465],[765,495],[765,525],[765,555],[795,165],[795,195],[795,225],[795,255],[795,285],[795,315],[795,345],[795,375],[795,405],[795,435],[795,465],[795,495],[795,525],[795,555],[825,165],[825,195],[825,225],[825,255],[825,285],[825,315],[825,345],[825,375],[825,405],[825,435],[825,465],[825,495],[825,525],[825,555],[855,165],[855,195],[855,225],[855,255],[855,285],[855,315],[855,345],[855,375],[855,405],[855,435],[855,465],[855,495],[855,525],[855,555]],""position"":[915,105],""lines"":[[525,615],[555,615],[585,615],[615,615],[645,615],[645,585],[675,585],[675,615],[705,615],[705,645],[705,675],[705,705],[735,705],[765,705],[795,705],[795,735],[795,765],[795,795],[795,825],[825,825],[855,825],[885,825],[915,825],[915,795],[915,765],[915,735],[915,705],[915,675],[915,645],[915,615],[915,585],[915,555],[915,525],[915,495],[915,465],[915,435],[915,405],[915,375],[915,345],[915,315],[915,285],[915,255],[915,225],[915,195],[915,165],[915,135],[915,105]],""bonuses"":[]},""i"":{""score"":350,""direction"":""down"",""territory"":[[15,135],[15,165],[15,195],[15,225],[15,255],[15,285],[15,315],[15,345],[15,375],[15,405],[15,435],[15,465],[15,495],[15,525],[15,555],[15,585],[15,615],[15,645],[15,675],[15,705],[15,735],[15,765],[15,795],[15,825],[15,855],[15,885],[15,915],[45,135],[45,165],[45,195],[45,225],[45,255],[45,285],[45,315],[45,345],[45,375],[45,405],[45,435],[45,465],[45,495],[45,525],[45,555],[45,585],[45,615],[45,645],[45,675],[45,705],[45,735],[45,765],[45,795],[45,825],[45,855],[45,885],[45,915],[75,135],[75,165],[75,195],[75,225],[75,255],[75,285],[75,315],[75,345],[75,375],[75,405],[75,435],[75,465],[75,495],[75,525],[75,555],[75,585],[75,615],[75,645],[75,675],[75,705],[75,735],[75,765],[75,795],[75,825],[75,855],[75,885],[75,915],[105,135],[105,165],[105,195],[105,225],[105,255],[105,285],[105,315],[105,345],[105,375],[105,405],[105,435],[105,465],[105,495],[105,525],[105,555],[105,585],[105,615],[105,645],[105,675],[105,705],[105,735],[105,765],[105,795],[105,825],[105,855],[105,885],[105,915],[135,135],[135,165],[135,195],[135,225],[135,255],[135,285],[135,315],[135,345],[135,375],[135,405],[135,435],[135,465],[135,495],[135,525],[135,555],[135,585],[135,615],[135,645],[135,675],[135,705],[135,735],[135,765],[135,795],[135,825],[135,855],[135,885],[135,915],[165,135],[165,165],[165,195],[165,225],[165,255],[165,285],[165,315],[165,345],[165,375],[165,405],[165,435],[165,465],[165,495],[165,525],[165,555],[165,585],[165,615],[165,645],[165,675],[165,705],[165,735],[165,765],[165,795],[165,825],[165,855],[165,885],[165,915],[195,135],[195,165],[195,195],[195,225],[195,255],[195,285],[195,315],[195,345],[195,375],[195,405],[195,435],[195,465],[195,495],[195,525],[195,555],[195,585],[195,615],[195,645],[195,675],[195,705],[195,735],[195,765],[195,795],[195,825],[195,855],[195,885],[195,915],[225,135],[225,165],[225,195],[225,225],[225,255],[225,285],[225,315],[225,345],[225,375],[225,405],[225,435],[225,465],[225,495],[225,525],[225,555],[225,585],[225,615],[225,645],[225,675],[225,705],[225,735],[225,885],[225,915],[255,135],[255,165],[255,195],[255,225],[255,255],[255,285],[255,315],[255,345],[255,375],[255,405],[255,435],[255,465],[255,495],[255,525],[255,555],[255,585],[255,615],[255,645],[255,675],[255,705],[255,735],[255,885],[255,915],[285,135],[285,165],[285,195],[285,225],[285,255],[285,285],[285,315],[285,345],[285,375],[285,405],[285,435],[285,465],[285,495],[285,525],[285,555],[285,585],[285,615],[285,645],[285,675],[285,705],[285,735],[315,135],[315,165],[315,195],[315,225],[315,255],[315,285],[315,315],[315,345],[315,375],[315,405],[315,435],[315,465],[315,495],[315,525],[315,555],[315,585],[315,615],[315,645],[315,675],[315,705],[315,735],[345,255],[345,285],[345,315],[345,345],[345,375],[345,405],[345,435],[345,465],[345,495],[345,525],[345,555],[345,585],[345,615],[345,645],[345,675],[345,705],[345,735],[375,405],[375,435],[375,465],[375,495],[375,525],[375,555],[375,585],[375,615],[375,645],[375,675],[405,465],[405,495],[405,525],[405,555],[405,585],[405,615],[405,645],[405,675],[435,465],[435,495],[435,525],[435,555],[435,585],[435,615],[435,645],[435,675],[465,465],[465,495],[465,525],[465,555],[465,585],[465,615],[465,645]],""position"":[15,525],""lines"":[],""bonuses"":[]}},""bonuses"":[],""tick_num"":697}",
                ConsoleProtocol.jsonSerializerSettings);

            state.SetInput(config, input);

            Console.Out.WriteLine(state.Print());

            var ai = new RandomWalkAi(conquerOpponent: true);

            var command = ai.GetCommand(state, state.curPlayer, new TestingTimeManager(1000), new Random(-1142053022));

            Console.Out.WriteLine(command.ToJson());
        }
        
        [Test]
        public void Perf()
        {
            Logger.enableFile = true;
            Logger.minLevel = Logger.Level.Debug;
            
            var state = new FastState();

            var config = new Config
            {
                x_cells_count = 31,
                y_cells_count = 31,
                speed = 5,
                width = 30
            };
            config.Prepare();

            var input = JsonConvert.DeserializeObject<RequestInput>(
                @"{""players"":{""2"":{""score"":172,""direction"":""down"",""territory"":[[495,405],[495,435],[495,465],[495,495],[495,525],[495,555],[525,255],[525,285],[525,315],[525,345],[525,375],[525,405],[525,435],[525,465],[525,495],[525,525],[525,555],[525,585],[555,165],[555,195],[555,225],[555,255],[555,285],[555,315],[555,345],[555,375],[555,405],[555,435],[555,465],[555,495],[555,525],[555,555],[555,585],[585,165],[585,195],[585,225],[585,255],[585,285],[585,315],[585,345],[585,375],[585,405],[585,435],[585,465],[585,495],[585,525],[585,555],[615,165],[615,195],[615,225],[615,255],[615,285],[615,315],[615,345],[615,375],[615,405],[615,435],[615,465],[615,495],[615,525],[615,555],[645,165],[645,195],[645,225],[645,255],[645,285],[645,315],[645,345],[645,375],[645,405],[645,435],[645,465],[645,495],[645,525],[645,555],[675,165],[675,195],[675,225],[675,255],[675,285],[675,315],[675,345],[675,375],[675,405],[675,435],[675,465],[675,495],[675,525],[675,555],[705,165],[705,195],[705,225],[705,255],[705,285],[705,315],[705,345],[705,375],[705,405],[705,435],[705,465],[705,495],[705,525],[705,555],[735,165],[735,195],[735,225],[735,255],[735,285],[735,315],[735,345],[735,375],[735,405],[735,435],[735,465],[735,495],[735,525],[735,555],[765,165],[765,195],[765,225],[765,255],[765,285],[765,315],[765,345],[765,375],[765,405],[765,435],[765,465],[765,495],[765,525],[765,555],[795,165],[795,195],[795,225],[795,255],[795,285],[795,315],[795,345],[795,375],[795,405],[795,435],[795,465],[795,495],[795,525],[795,555],[825,165],[825,195],[825,225],[825,255],[825,285],[825,315],[825,345],[825,375],[825,405],[825,435],[825,465],[825,495],[825,525],[825,555],[855,165],[855,195],[855,225],[855,255],[855,285],[855,315],[855,345],[855,375],[855,405],[855,435],[855,465],[855,495],[855,525],[855,555]],""position"":[915,105],""lines"":[[525,615],[555,615],[585,615],[615,615],[645,615],[645,585],[675,585],[675,615],[705,615],[705,645],[705,675],[705,705],[735,705],[765,705],[795,705],[795,735],[795,765],[795,795],[795,825],[825,825],[855,825],[885,825],[915,825],[915,795],[915,765],[915,735],[915,705],[915,675],[915,645],[915,615],[915,585],[915,555],[915,525],[915,495],[915,465],[915,435],[915,405],[915,375],[915,345],[915,315],[915,285],[915,255],[915,225],[915,195],[915,165],[915,135],[915,105]],""bonuses"":[]},""i"":{""score"":350,""direction"":""down"",""territory"":[[15,135],[15,165],[15,195],[15,225],[15,255],[15,285],[15,315],[15,345],[15,375],[15,405],[15,435],[15,465],[15,495],[15,525],[15,555],[15,585],[15,615],[15,645],[15,675],[15,705],[15,735],[15,765],[15,795],[15,825],[15,855],[15,885],[15,915],[45,135],[45,165],[45,195],[45,225],[45,255],[45,285],[45,315],[45,345],[45,375],[45,405],[45,435],[45,465],[45,495],[45,525],[45,555],[45,585],[45,615],[45,645],[45,675],[45,705],[45,735],[45,765],[45,795],[45,825],[45,855],[45,885],[45,915],[75,135],[75,165],[75,195],[75,225],[75,255],[75,285],[75,315],[75,345],[75,375],[75,405],[75,435],[75,465],[75,495],[75,525],[75,555],[75,585],[75,615],[75,645],[75,675],[75,705],[75,735],[75,765],[75,795],[75,825],[75,855],[75,885],[75,915],[105,135],[105,165],[105,195],[105,225],[105,255],[105,285],[105,315],[105,345],[105,375],[105,405],[105,435],[105,465],[105,495],[105,525],[105,555],[105,585],[105,615],[105,645],[105,675],[105,705],[105,735],[105,765],[105,795],[105,825],[105,855],[105,885],[105,915],[135,135],[135,165],[135,195],[135,225],[135,255],[135,285],[135,315],[135,345],[135,375],[135,405],[135,435],[135,465],[135,495],[135,525],[135,555],[135,585],[135,615],[135,645],[135,675],[135,705],[135,735],[135,765],[135,795],[135,825],[135,855],[135,885],[135,915],[165,135],[165,165],[165,195],[165,225],[165,255],[165,285],[165,315],[165,345],[165,375],[165,405],[165,435],[165,465],[165,495],[165,525],[165,555],[165,585],[165,615],[165,645],[165,675],[165,705],[165,735],[165,765],[165,795],[165,825],[165,855],[165,885],[165,915],[195,135],[195,165],[195,195],[195,225],[195,255],[195,285],[195,315],[195,345],[195,375],[195,405],[195,435],[195,465],[195,495],[195,525],[195,555],[195,585],[195,615],[195,645],[195,675],[195,705],[195,735],[195,765],[195,795],[195,825],[195,855],[195,885],[195,915],[225,135],[225,165],[225,195],[225,225],[225,255],[225,285],[225,315],[225,345],[225,375],[225,405],[225,435],[225,465],[225,495],[225,525],[225,555],[225,585],[225,615],[225,645],[225,675],[225,705],[225,735],[225,885],[225,915],[255,135],[255,165],[255,195],[255,225],[255,255],[255,285],[255,315],[255,345],[255,375],[255,405],[255,435],[255,465],[255,495],[255,525],[255,555],[255,585],[255,615],[255,645],[255,675],[255,705],[255,735],[255,885],[255,915],[285,135],[285,165],[285,195],[285,225],[285,255],[285,285],[285,315],[285,345],[285,375],[285,405],[285,435],[285,465],[285,495],[285,525],[285,555],[285,585],[285,615],[285,645],[285,675],[285,705],[285,735],[315,135],[315,165],[315,195],[315,225],[315,255],[315,285],[315,315],[315,345],[315,375],[315,405],[315,435],[315,465],[315,495],[315,525],[315,555],[315,585],[315,615],[315,645],[315,675],[315,705],[315,735],[345,255],[345,285],[345,315],[345,345],[345,375],[345,405],[345,435],[345,465],[345,495],[345,525],[345,555],[345,585],[345,615],[345,645],[345,675],[345,705],[345,735],[375,405],[375,435],[375,465],[375,495],[375,525],[375,555],[375,585],[375,615],[375,645],[375,675],[405,465],[405,495],[405,525],[405,555],[405,585],[405,615],[405,645],[405,675],[435,465],[435,495],[435,525],[435,555],[435,585],[435,615],[435,645],[435,675],[465,465],[465,495],[465,525],[465,555],[465,585],[465,615],[465,645]],""position"":[15,525],""lines"":[],""bonuses"":[]}},""bonuses"":[],""tick_num"":697}",
                ConsoleProtocol.jsonSerializerSettings);

            state.SetInput(config, input);

            Console.Out.WriteLine(state.Print());

            var capture = new FastTerritoryCapture();
            capture.Init(config, 6);
            capture.Clear();
            capture.Capture(state, state.curPlayer);

            var stopwatch = Stopwatch.StartNew();
            var counter = 0;
            while (stopwatch.ElapsedMilliseconds < 1000)
            {
                counter++;
                capture.Clear();
                capture.Capture(state, state.curPlayer);
            }

            Console.Out.WriteLine(counter);
        }
        
        [Test]
        public void Debug_visio()
        {
            Logger.enableFile = true;
            Logger.minLevel = Logger.Level.Debug;
            
            var state = new FastState();

            var config = new Config
            {
                x_cells_count = 31,
                y_cells_count = 31,
                speed = 5,
                width = 30
            };
            config.Prepare();

            var visio = JObject.Parse(File.ReadAllText("/Users/spaceorc/Downloads/visio (7)"));

            var visioInfo = (JArray)visio["visio_info"];
            var tick = visioInfo.Single(x => x["tick_num"]?.ToString() == "277");

            var input = tick.ToObject<RequestInput>(JsonSerializer.Create(ConsoleProtocol.jsonSerializerSettings));

            input.players["i"] = input.players["5"];
            //input.players["1"] = input.players["5"];
            input.players.Remove("5"); 
            //input.players.Remove("5"); 

            state.SetInput(config, input);

            Console.Out.WriteLine(state.Print());

            var ai = new RandomWalkAi(conquerOpponent: true);

            var command = ai.GetCommand(state, state.curPlayer, new TestingTimeManager(2729), new Random(1885872382));

            Console.Out.WriteLine(command.ToJson());
        }

        private class TestingTimeManager : ITimeManager
        {
            private int counter;

            public TestingTimeManager(int counter)
            {
                this.counter = counter;
            }

            public bool IsExpired => counter-- <= 0;
            public bool BeStupid { get; }
            public bool BeSmart { get; }
            public bool IsExpiredGlobal { get; }
        }

        [Test]
        public void METHOD()
        {
            var state = new FastState();

            var clients = Enumerable.Range(0, 6).Select(x => new TestClient()).ToArray();

            var game = new BrutalTester.Sim.Game(clients);
            game.SendGameStart();
            game.GameLoop();

            var config = clients[0].Config;
            state.SetInput(config, clients[0].Input);

            Console.Out.WriteLine($"Perf: {FastTerritoryCapture.Perf(state)}");

            return;
            var commands = new Direction[state.players.Length];
            var undo = state.NextTurn(commands, true);
            state.Undo(undo);

            var stopwatch = Stopwatch.StartNew();
            long counter = 0;

            while (stopwatch.ElapsedMilliseconds < 4000)
            {
                counter++;
                // for (int i = 0; i < state.players.Length; i++)
                // {
                //     if (state.players[i].status == PlayerStatus.Active && state.players[i].arriveTime == 0)
                //     {
                //         if (state.players[i].dir == null)
                //             commands[i] = Direction.Up;
                //         else
                //             commands[i] = (Direction)(((int)state.players[i].dir.Value + 1) % 4);
                //     }
                // }

                undo = state.NextTurn(commands, true);
                state.Undo(undo);
            }

            Console.Out.WriteLine(counter * 6);
        }

        private class TestClient : IClient
        {
            public Config Config { get; private set; }
            public RequestInput Input { get; private set; }

            public void SendConfig(Config config)
            {
                Config = config;
                config.Prepare();
            }

            public void SendGameEnd()
            {
            }

            public RequestOutput SendRequestInput(RequestInput requestInput)
            {
                Input = requestInput;
                return new RequestOutput();
            }
        }
    }
}